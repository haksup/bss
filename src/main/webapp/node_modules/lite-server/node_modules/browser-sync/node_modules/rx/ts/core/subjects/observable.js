/// <reference path="./es6.ts" />
/// <reference path="./disposables/disposable.ts" />
/// <reference path="./observer-lite.ts" />
var Rx;
(function (Rx) {
    var config;
    (function (config) {
        config.Promise;
    })(config = Rx.config || (Rx.config = {}));
    var helpers;
    (function (helpers) {
        helpers.noop;
        helpers.notDefined;
        helpers.identity;
        helpers.defaultNow;
        helpers.defaultComparer;
        helpers.defaultSubComparer;
        helpers.defaultKeySerializer;
        helpers.defaultError;
        helpers.isPromise;
        helpers.asArray;
        helpers.not;
        helpers.isFunction;
    })(helpers = Rx.helpers || (Rx.helpers = {}));
    (function (value, index, observable) { return TResult; });
    TResult | _Selector();
    _Selector();
    (function (value1, value2) { return TResult; });
    (function (acc, value) { return TAcc; });
    var special;
    (function (special) {
        (function (value, selectorValue, index, selectorOther) { return TResult; });
    })(special = Rx.special || (Rx.special = {}));
    Rx.Observable;
})(Rx || (Rx = {}));
(function () {
    var observer;
    var observable;
    observable.subscribe(observer);
    observable.subscribe(function (v) { });
    observable.subscribe(function (v) { }, function (e) { });
    observable.subscribe(function (v) { }, function (e) { }, function () { });
    observable.subscribeOnNext(function (v) { });
    observable.subscribeOnNext(function (v) { }, {});
    observable.subscribeOnError(function (v) { });
    observable.subscribeOnError(function (v) { }, {});
    observable.subscribeOnCompleted(function () { });
    observable.subscribeOnCompleted(function () { }, {});
    observable.forEach(observer);
    observable.forEach(function (v) { });
    observable.forEach(function (v) { }, function (e) { });
    observable.forEach(function (v) { }, function (e) { }, function () { });
    Rx.Observable.isObservable({});
});
